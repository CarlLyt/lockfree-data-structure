cmake_minimum_required(VERSION 3.14)

include_directories("./")
add_executable(reorder_example reorder_example.cc)
add_executable(reorder_example_flag reorder_example_flag.cc)
add_executable(reorder_example_mutex reorder_example_mutex.cc)
add_executable(reorder_example_semaphore reorder_example_semaphore.cc)

add_executable(reorder_atomic_seq_cst reorder_atomic_seq_cst.cc)
add_executable(reorder_atomic_thread_fence_example reorder_atomic_thread_fence_example.cc)

add_executable(reorder_atomic_acq_rel reorder_atomic_acq_rel.cc)
add_executable(reorder_atomic_acq_rel_flag reorder_atomic_acq_rel_flag.cc)
add_executable(reorder_atomic_load_acq_store_rel reorder_atomic_load_acq_store_rel.cc)

add_executable(reorder_atomic_acq_cum reorder_atomic_acq_cum.cc)

add_executable(reorder_atomic_relaxed reorder_atomic_relaxed.cc)
add_executable(reorder_atomic_relaxed_flag reorder_atomic_relaxed_flag.cc)

message("architecture is " ${CMAKE_HOST_SYSTEM_PROCESSOR})
if (${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "arm64")
    message("Program Run On arm64 Arch")
    target_link_libraries(reorder_example -lpthread)
    target_link_libraries(reorder_example_flag -lrt -lpthread)
    target_link_libraries(reorder_atomic_seq_cst -lpthread)
    target_link_libraries(reorder_atomic_thread_fence_example -lpthread)
    target_link_libraries(reorder_atomic_acq_rel -lpthread)
    target_link_libraries(reorder_atomic_acq_rel_flag -lpthread)
    target_link_libraries(reorder_atomic_acq_cum -lpthread)
    target_link_libraries(reorder_atomic_relaxed -lpthread)
    target_link_libraries(reorder_atomic_relaxed_flag -lpthread)
    target_link_libraries(reorder_example_mutex -lpthread)
    target_link_libraries(reorder_example_semaphore -lpthread)
    target_link_libraries(reorder_atomic_load_acq_store_rel -lpthread)
else(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")
    message("Program Run On x86 Arch")
  target_link_libraries(reorder_example -lrt -lpthread)
  target_link_libraries(reorder_example_flag -lrt -lpthread)
  target_link_libraries(reorder_atomic_seq_cst -lrt -lpthread)
  target_link_libraries(reorder_atomic_thread_fence_example  -lrt -lpthread)
  target_link_libraries(reorder_atomic_acq_rel  -lrt -lpthread)
  target_link_libraries(reorder_atomic_acq_rel_flag -lrt -lpthread)
  target_link_libraries(reorder_atomic_acq_cum -lrt -lpthread)
  target_link_libraries(reorder_atomic_relaxed -lrt -lpthread)
  target_link_libraries(reorder_example_mutex -lrt -lpthread)
  target_link_libraries(reorder_example_semaphore -lrt -lpthread)
  target_link_libraries(reorder_atomic_relaxed_flag -lrt -lpthread)
  target_link_libraries(reorder_atomic_load_acq_store_rel  -lrt -lpthread)

endif()


